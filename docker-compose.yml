version: "3.6"

volumes:
  postgres_data: {}
  postgres_backups: {}
  minio_data: {}

services:
  public_api:
    build:
      context: .
      dockerfile: public_api/Dockerfile
    ports:
      - "8300:8000"
    depends_on:
      - postgres
      - redis
      - minio
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/action_service
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=webhooks
      - MINIO_USE_SSL=false
      - PYTHONPATH=/app
    volumes:
      - .:/app/action_service
    command: ["uvicorn", "action_service.management_api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    command: ["uvicorn", "action_service.public_api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  management_api:
    build:
      context: .
      dockerfile: management_api/Dockerfile
    ports:
      - "8301:8000"  # Different port to avoid conflicts
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/action_service
    volumes:
      - .:/app/action_service

  worker:
    build:
      context: .
      dockerfile: worker_service/Dockerfile
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/action_service
      - PYTHONPATH=/app
    volumes:
      - .:/app/action_service

  postgres:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
    environment:
      - POSTGRES_DB=action_service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4
    ports:
      - "6379"

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"  # Web console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server --console-address ":9001" /data
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
